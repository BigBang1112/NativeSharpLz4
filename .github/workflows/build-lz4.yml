name: Build lz4

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  build:
    name: Build lz4
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler:
        - {target: windows-static-x86, src: liblz4.dll, dst: liblz4.dll, rid: win-x86}
        - {target: windows-static-x64, src: liblz4.dll, dst: liblz4.dll, rid: win-x64}
        - {target: linux-x64, src: liblz4.so, dst: liblz4.so, rid: linux-x64}
        - {target: linux-armv6, src: liblz4.so, dst: liblz4.so, rid: linux-arm}
        - {target: linux-arm64, src: liblz4.so, dst: liblz4.so, rid: linux-arm64}
        - {target: "web-wasm:20241110-43b2dd1", src: liblz4.a, dst: liblz4.a, rid: browser-wasm}

    container:
      image: dockcross/${{ matrix.compiler.target }}

    steps:
    - uses: actions/checkout@v4

    - name: Cache lz4-${{ inputs.version }}
      id: cache-lz4
      uses: actions/cache@v4
      with:
        path: runtimes
        key: lz4-${{ inputs.version }}-${{ matrix.compiler.rid }}

    - name: Download and extract lz4-${{ inputs.version }}
      if: steps.cache-lz4.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/lz4/lz4/releases/download/v${{ inputs.version }}/lz4-${{ inputs.version }}.tar.gz
        tar -xzvf lz4-${{ inputs.version }}.tar.gz

    - name: Build lz4-${{ inputs.version }}
      if: steps.cache-lz4.outputs.cache-hit != 'true'
      run: |
        cd lz4-${{ inputs.version }}
        make
        mkdir -p ../runtimes/${{ matrix.compiler.rid }}/native
        cp -r lib/. ../runtimes/${{ matrix.compiler.rid }}/native/

    - name: Upload lz4-${{ inputs.version }}
      uses: actions/upload-artifact@v4
      with:
        name: lz4-${{ inputs.version }}-${{ matrix.compiler.rid }}
        path: runtimes
        if-no-files-found: error
